Prompting Strategies in GPTScan

1. Scenario and Property Matching Prompt (Section 4.2, Figure 4) 
System: You are a smart contract auditor. You will be asked questions related to code properties. You can mimic answering them in the background five times and provide me with the most frequently appearing answer. Furthermore, please strictly adhere to the output format specified in the question; there is no need to explain your answer.

Scenario Matching:
Given the following smart contract code, answer the questions below and organize the result in a JSON format like {"1": "Yes" or "No", "2": "Yes" or "No"}.
"1": [%SCENARIO_1%]?
"2": [%SCENARIO_2%]?
[%CODE%]

Property Matching:
Does the following smart contract code "[%SCENARIO, PROPERTY%]"? Answer only "Yes" or "No".
[%CODE%]

2. Mimic-in-the-Background Trick (Section 4.2) 
To minimize GPT’s output randomness, GPTScan sets the temperature parameter to 0 for deterministic outputs and instructs GPT to simulate answering the same prompt five times in the background, returning the most frequent answer.

3. Recognition of Key Variables and Statements Prompt (Section 4.4, Figure 5)
System: (same as in Scenario and Property Matching)
In this function, which variable or function holds the total supply/liquidity AND is used by the conditional branch to determine the supply/liquidity is 0? Please answer in a section starting with "VariableB:".
In this function, which variable or function holds the value of the deposit/mint/add amount? Please answer in a section starting with "VariableC:".
Please answer in the following JSON format:
{"VariableA":{"Variable name":"Description"}, "VariableB":{"Variable name":"Description"}, "VariableC":{"Variable name":"Description"}}
[%CODE%]

4. Model and Parameter Settings (Section 4.5)
- GPT model: GPT‑3.5‑turbo
- Temperature: 0 (deterministic output)
- TopP: 1.0; Frequency penalty: 0; Presence penalty: 0
- Each prompt is sent in a fresh session to avoid context carryover.

All prompts are manually crafted per vulnerability type to exactly match scenarios and properties and enforce structured, parseable JSON outputs. This design ensures cost efficiency by querying all scenarios in one prompt and accuracy via subsequent static analysis confirmation.

Results of Prompting Strategies:

False Positive Rate (RQ1):
- Top200 (non-vulnerable contracts): False positive rate = 4.39%.
- DefiHacks: Precision = 90.91%.
- Web3Bugs: Precision = 57.14%.

Detection Accuracy (RQ2):
- Web3Bugs: Recall = 83.33%, F1 = 67.8%.
- DefiHacks: Recall = 71.43%, F1 = 80.0%.

Static Confirmation Effectiveness (RQ3):
- Raw matches before static confirmation: 647 functions.
- After static confirmation: 221 functions.
- Static confirmation filtered out 65.84% of potential false positives with minimal impact on true positives.

Performance & Cost (RQ4):
- Average scan time: 14.39 seconds per 1 KLoC.
- Average cost: $0.0106 per 1 KLoC.

New Vulnerabilities Discovered (RQ5):
- 9 new logic vulnerabilities found:
  • 5 Risky First Deposit
  • 3 Price Manipulation by AMM
  • 1 Front Running
